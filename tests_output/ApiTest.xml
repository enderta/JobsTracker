<?xml version="1.0" encoding="UTF-8" ?>
<testsuites errors="0"
            failures="1"
            tests="1">

  <testsuite name="ApiTest"
    errors="0" failures="1" hostname="" id="" package="ApiTest" skipped="0"
    tests="1" time="0.6280" timestamp="">
  
    <testcase name="amazon web testing" classname="ApiTest" time="0.3130" assertions="1">  <failure message="expected NightwatchAPI{ …(193) } to equal &#39;Amazon.com: Online Shopping for Elect…&#39; - expected &#34;Amazon.com: Online Shopping for Electronics, Apparel, Computers, Books, DVDs &amp; more&#34; but got: &#34;NightwatchAPI {
  capabilities: {},
  currentTest: [Getter],
  desiredCapabilities: { browserName: &#39;firefox&#39;, name: &#39;api testing&#39; },
  sessionId: null,
  options: {
    always_async_commands: false,
    backwards_compatibility_mode: false,
    baseUrl: &#39;https://nightwatchjs.org&#39;,
    base_url: &#39;https://nightwatchjs.org&#39;,
    custom_assertions_path: &#39;&#39;,
    custom_commands_path: [ &#39;node_modules/nightwatch/examples/custom-commands/&#39; ],
    default_reporter: [ &#39;junit&#39;, &#39;json&#39;, &#39;minimalJson&#39;, &#39;html&#39; ],
    desiredCapabilities: { browserName: &#39;firefox&#39;, name: &#39;api testing&#39; },
    detailed_output: true,
    disable_colors: false,
    disable_error_log: false,
    disable_global_apis: false,
    disable_global_expect: false,
    disable_output_boxes: false,
    disable_typescript: false,
    dotenv: {},
    element_command_retries: 3,
    enable_fail_fast: false,
    enable_v3_element_apis: true,
    end_session_on_fail: true,
    exclude: null,
    filename_format: null,
    filter: null,
    folder_format: null,
    globals: {
      abortOnAssertionFailure: true,
      abortOnElementLocateError: false,
      waitForConditionPollInterval: 500,
      waitForConditionTimeout: 5000,
      throwOnMultipleElementsReturned: false,
      suppressWarningsOnMultipleElementsReturned: true,
      asyncHookTimeout: 20000,
      unitTestsTimeout: 2000,
      customReporterCallbackTimeout: 20000,
      retryAssertionTimeout: 5000,
      reuseBrowserSession: false,
      reporter: [Function: reporter],
      beforeTestSuite: [Function: beforeTestSuite],
      afterTestSuite: [Function: afterTestSuite],
      beforeTestCase: [Function: beforeTestCase],
      afterTestCase: [Function: afterTestCase],
      onBrowserNavigate: [Function: onBrowserNavigate],
      onBrowserQuit: [Function: onBrowserQuit]
    },
    globals_path: &#39;&#39;,
    launchUrl: &#39;https://nightwatchjs.org&#39;,
    launch_url: &#39;https://nightwatchjs.org&#39;,
    live_output: false,
    log_screenshot_data: false,
    minimal_report_file_path: &#39;tests_output/minimal_report.json&#39;,
    output: true,
    output_folder: &#39;tests_output&#39;,
    output_timestamp: false,
    page_objects_path: [ &#39;node_modules/nightwatch/examples/pages/&#39; ],
    parallel_mode: false,
    parallel_process_delay: 10,
    persist_globals: false,
    plugins: [ &#39;@nightwatch/apitesting&#39; ],
    report_command_errors: false,
    report_network_errors: true,
    report_prefix: &#39;&#39;,
    reporter_options: {
      output_folder: &#39;tests_output&#39;,
      folder_format: null,
      filename_format: null,
      minimal_report_file_path: &#39;tests_output/minimal_report.json&#39;
    },
    screenshots: {
      enabled: false,
      filename_format: [Function: filename_format],
      path: &#39;/home/ender/IdeaProjects/jobs/screens&#39;,
      on_error: true,
      on_failure: true
    },
    screenshotsPath: &#39;/home/ender/IdeaProjects/jobs/screens&#39;,
    selenium: {
      start_process: false,
      cli_args: {},
      server_path: null,
      log_path: &#39;./logs&#39;,
      port: undefined,
      check_process_delay: 500,
      max_status_poll_tries: 15,
      status_poll_interval: 200,
      url: &#39;http://localhost:undefined&#39;
    },
    silent: true,
    skip_testcases_on_fail: true,
    skipgroup: &#39;&#39;,
    skiptags: &#39;&#39;,
    src_folders: [],
    start_session: false,
    sync_test_names: true,
    testEnv: &#39;api_testing&#39;,
    testWorkersEnabled: false,
    test_runner: { type: &#39;default&#39;, options: {} },
    test_settings: {},
    test_workers: { enabled: true, workers: &#39;auto&#39; },
    timestamp_format: &#39;&#39;,
    trace: {
      enabled: false,
      path: &#39;&#39;,
      filename_format: [Function: snapshot_file_format]
    },
    tsconfig_path: &#39;&#39;,
    unit_testing_mode: false,
    unit_tests_mode: false,
    usage_analytics: {
      enabled: false,
      log_path: &#39;./logs/analytics&#39;,
      client_id: &#39;bff83f41-2870-4277-a64d-b240e72c288d&#39;
    },
    use_child_process: false,
    use_xpath: false,
    webdriver: {
      start_process: false,
      cli_args: {},
      server_path: &#39;&#39;,
      log_path: &#39;./logs&#39;,
      log_file_name: &#39;&#39;,
      check_process_delay: 100,
      max_status_poll_tries: 10,
      status_poll_interval: 200,
      process_create_timeout: 120000,
      host: &#39;localhost&#39;,
      port: 4444,
      ssl: false,
      proxy: undefined,
      timeout_options: [Object],
      default_path_prefix: &#39;&#39;,
      username: undefined,
      access_key: undefined,
      start_session: false,
      url: &#39;http://localhost:undefined&#39;
    },
    capabilities: { browserName: &#39;firefox&#39;, name: &#39;api testing&#39; }
  },
  globals: {
    abortOnAssertionFailure: true,
    abortOnElementLocateError: false,
    waitForConditionPollInterval: 500,
    waitForConditionTimeout: 5000,
    throwOnMultipleElementsReturned: false,
    suppressWarningsOnMultipleElementsReturned: true,
    asyncHookTimeout: 20000,
    unitTestsTimeout: 2000,
    customReporterCallbackTimeout: 20000,
    retryAssertionTimeout: 5000,
    reuseBrowserSession: false,
    reporter: [Function: reporter],
    beforeTestSuite: [Function: beforeTestSuite],
    afterTestSuite: [Function: afterTestSuite],
    beforeTestCase: [Function: beforeTestCase],
    afterTestCase: [Function: afterTestCase],
    onBrowserNavigate: [Function: onBrowserNavigate],
    onBrowserQuit: [Function: onBrowserQuit]
  },
  createElement: [Function (anonymous)],
  baseUrl: &#39;https://nightwatchjs.org&#39;,
  launchUrl: &#39;https://nightwatchjs.org&#39;,
  launch_url: &#39;https://nightwatchjs.org&#39;,
  page: {
    google: {
      consent: [Function: bound pageObjectDefinition],
      search: [Function: bound pageObjectDefinition],
      searchResults: [Function: bound pageObjectDefinition]
    },
    nightwatchFeatures: [Function: bound pageObjectDefinition]
  },
  assert: {
    fail: [Function: bound assertFn],
    AssertionError: [Function: bound assertFn],
    ok: [Function: bound assertFn],
    equal: [Function: bound assertFn],
    notEqual: [Function: bound assertFn],
    deepEqual: [Function: bound assertFn],
    notDeepEqual: [Function: bound assertFn],
    deepStrictEqual: [Function: bound assertFn],
    notDeepStrictEqual: [Function: bound assertFn],
    strictEqual: [Function: bound assertFn],
    notStrictEqual: [Function: bound assertFn],
    throws: [Function: bound assertFn],
    rejects: [Function: bound assertFn],
    doesNotThrow: [Function: bound assertFn],
    doesNotReject: [Function: bound assertFn],
    ifError: [Function: bound assertFn],
    match: [Function: bound assertFn],
    doesNotMatch: [Function: bound assertFn],
    CallTracker: [Function: bound assertFn],
    strict: [Function: bound assertFn],
    attributeContains: [Function: bound queuedCommandFn],
    attributeEquals: [Function: bound queuedCommandFn],
    attributeMatches: [Function: bound queuedCommandFn],
    contains: [Function: bound queuedCommandFn],
    containsText: [Function: bound queuedCommandFn],
    cssClassNotPresent: [Function: bound queuedCommandFn],
    cssClassPresent: [Function: bound queuedCommandFn],
    cssProperty: [Function: bound queuedCommandFn],
    domPropertyContains: [Function: bound queuedCommandFn],
    domPropertyEquals: [Function: bound queuedCommandFn],
    domPropertyMatches: [Function: bound queuedCommandFn],
    elementNotPresent: [Function: bound queuedCommandFn],
    elementPresent: [Function: bound queuedCommandFn],
    elementsCount: [Function: bound queuedCommandFn],
    enabled: [Function: bound queuedCommandFn],
    hasAttribute: [Function: bound queuedCommandFn],
    hasClass: [Function: bound queuedCommandFn],
    hasDescendants: [Function: bound queuedCommandFn],
    hidden: [Function: bound queuedCommandFn],
    promisedValue: [Function: bound queuedCommandFn],
    selected: [Function: bound queuedCommandFn],
    textContains: [Function: bound queuedCommandFn],
    textEquals: [Function: bound queuedCommandFn],
    textMatches: [Function: bound queuedCommandFn],
    title: [Function: bound queuedCommandFn],
    titleContains: [Function: bound queuedCommandFn],
    titleEquals: [Function: bound queuedCommandFn],
    titleMatches: [Function: bound queuedCommandFn],
    urlContains: [Function: bound queuedCommandFn],
    urlEquals: [Function: bound queuedCommandFn],
    urlMatches: [Function: bound queuedCommandFn],
    value: [Function: bound queuedCommandFn],
    valueContains: [Function: bound queuedCommandFn],
    valueEquals: [Function: bound queuedCommandFn],
    visible: [Function: bound queuedCommandFn]
  },
  verify: {
    attributeContains: [Function: bound queuedCommandFn],
    attributeEquals: [Function: bound queuedCommandFn],
    attributeMatches: [Function: bound queuedCommandFn],
    contains: [Function: bound queuedCommandFn],
    containsText: [Function: bound queuedCommandFn],
    cssClassNotPresent: [Function: bound queuedCommandFn],
    cssClassPresent: [Function: bound queuedCommandFn],
    cssProperty: [Function: bound queuedCommandFn],
    domPropertyContains: [Function: bound queuedCommandFn],
    domPropertyEquals: [Function: bound queuedCommandFn],
    domPropertyMatches: [Function: bound queuedCommandFn],
    elementNotPresent: [Function: bound queuedCommandFn],
    elementPresent: [Function: bound queuedCommandFn],
    elementsCount: [Function: bound queuedCommandFn],
    enabled: [Function: bound queuedCommandFn],
    hasAttribute: [Function: bound queuedCommandFn],
    hasClass: [Function: bound queuedCommandFn],
    hasDescendants: [Function: bound queuedCommandFn],
    hidden: [Function: bound queuedCommandFn],
    promisedValue: [Function: bound queuedCommandFn],
    selected: [Function: bound queuedCommandFn],
    textContains: [Function: bound queuedCommandFn],
    textEquals: [Function: bound queuedCommandFn],
    textMatches: [Function: bound queuedCommandFn],
    title: [Function: bound queuedCommandFn],
    titleContains: [Function: bound queuedCommandFn],
    titleEquals: [Function: bound queuedCommandFn],
    titleMatches: [Function: bound queuedCommandFn],
    urlContains: [Function: bound queuedCommandFn],
    urlEquals: [Function: bound queuedCommandFn],
    urlMatches: [Function: bound queuedCommandFn],
    value: [Function: bound queuedCommandFn],
    valueContains: [Function: bound queuedCommandFn],
    valueEquals: [Function: bound queuedCommandFn],
    visible: [Function: bound queuedCommandFn]
  },
  ensure: {
    elementTextMatches: [Function: bound assertFn],
    elementTextContains: [Function: bound assertFn],
    elementTextIs: [Function: bound assertFn],
    elementIsNotSelected: [Function: bound assertFn],
    elementIsSelected: [Function: bound assertFn],
    elementIsDisabled: [Function: bound assertFn],
    ableToSwitchToFrame: [Function: bound assertFn],
    elementIsEnabled: [Function: bound assertFn],
    elementIsNotVisible: [Function: bound assertFn],
    elementIsVisible: [Function: bound assertFn],
    stalenessOf: [Function: bound assertFn],
    elementsLocated: [Function: bound assertFn],
    elementLocated: [Function: bound assertFn],
    urlMatches: [Function: bound assertFn],
    urlContains: [Function: bound assertFn],
    urlIs: [Function: bound assertFn],
    titleMatches: [Function: bound assertFn],
    titleContains: [Function: bound assertFn],
    alertIsPresent: [Function: bound assertFn],
    titleIs: [Function: bound assertFn]
  },
  chrome: {
    launchApp: [Function: bound queuedCommandFn],
    getNetworkConditions: [Function: bound queuedCommandFn],
    setNetworkConditions: [Function: bound queuedCommandFn],
    sendDevToolsCommand: [Function: bound queuedCommandFn],
    sendAndGetDevToolsCommand: [Function: bound queuedCommandFn],
    setPermission: [Function: bound queuedCommandFn],
    setDownloadPath: [Function: bound queuedCommandFn],
    getCastSinks: [Function: bound queuedCommandFn],
    setCastSinkToUse: [Function: bound queuedCommandFn],
    startCastTabMirroring: [Function: bound queuedCommandFn],
    getCastIssueMessage: [Function: bound queuedCommandFn],
    stopCasting: [Function: bound queuedCommandFn]
  },
  firefox: {
    getContext: [Function: bound queuedCommandFn],
    setContext: [Function: bound queuedCommandFn],
    installAddon: [Function: bound queuedCommandFn],
    uninstallAddon: [Function: bound queuedCommandFn]
  },
  driver: [Getter],
  actions: [Function (anonymous)],
  Keys: {
    NULL: &#39;&#39;,
    CANCEL: &#39;&#39;,
    HELP: &#39;&#39;,
    BACK_SPACE: &#39;&#39;,
    TAB: &#39;&#39;,
    CLEAR: &#39;&#39;,
    RETURN: &#39;&#39;,
    ENTER: &#39;&#39;,
    SHIFT: &#39;&#39;,
    CONTROL: &#39;&#39;,
    ALT: &#39;&#39;,
    PAUSE: &#39;&#39;,
    ESCAPE: &#39;&#39;,
    SPACE: &#39;&#39;,
    PAGE_UP: &#39;&#39;,
    PAGE_DOWN: &#39;&#39;,
    END: &#39;&#39;,
    HOME: &#39;&#39;,
    ARROW_LEFT: &#39;&#39;,
    LEFT: &#39;&#39;,
    ARROW_UP: &#39;&#39;,
    UP: &#39;&#39;,
    ARROW_RIGHT: &#39;&#39;,
    RIGHT: &#39;&#39;,
    ARROW_DOWN: &#39;&#39;,
    DOWN: &#39;&#39;,
    INSERT: &#39;&#39;,
    DELETE: &#39;&#39;,
    SEMICOLON: &#39;&#39;,
    EQUALS: &#39;&#39;,
    NUMPAD0: &#39;&#39;,
    NUMPAD1: &#39;&#39;,
    NUMPAD2: &#39;&#39;,
    NUMPAD3: &#39;&#39;,
    NUMPAD4: &#39;&#39;,
    NUMPAD5: &#39;&#39;,
    NUMPAD6: &#39;&#39;,
    NUMPAD7: &#39;&#39;,
    NUMPAD8: &#39;&#39;,
    NUMPAD9: &#39;&#39;,
    MULTIPLY: &#39;&#39;,
    ADD: &#39;&#39;,
    SEPARATOR: &#39;&#39;,
    SUBTRACT: &#39;&#39;,
    DECIMAL: &#39;&#39;,
    DIVIDE: &#39;&#39;,
    F1: &#39;&#39;,
    F2: &#39;&#39;,
    F3: &#39;&#39;,
    F4: &#39;&#39;,
    F5: &#39;&#39;,
    F6: &#39;&#39;,
    F7: &#39;&#39;,
    F8: &#39;&#39;,
    F9: &#39;&#39;,
    F10: &#39;&#39;,
    F11: &#39;&#39;,
    F12: &#39;&#39;,
    COMMAND: &#39;&#39;,
    META: &#39;&#39;,
    ZENKAKU_HANKAKU: &#39;&#39;,
    chord: [Function (anonymous)]
  },
  expect: [Function (anonymous)] {
    null: [Function: bound queuedCommandFn],
    active: [Function: bound queuedCommandFn],
    attribute: [Function: bound queuedCommandFn],
    css: [Function: bound queuedCommandFn],
    enabled: [Function: bound queuedCommandFn],
    present: [Function: bound queuedCommandFn],
    property: [Function: bound queuedCommandFn],
    selected: [Function: bound queuedCommandFn],
    text: [Function: bound queuedCommandFn],
    type: [Function: bound queuedCommandFn],
    value: [Function: bound queuedCommandFn],
    visible: [Function: bound queuedCommandFn],
    count: [Function: bound queuedCommandFn],
    component: [Function: bound queuedCommandFn],
    cookie: [Function: bound queuedCommandFn],
    element: [Function: bound queuedCommandFn],
    elements: [Function: bound queuedCommandFn],
    title: [Function: bound queuedCommandFn],
    url: [Function: bound queuedCommandFn]
  },
  acceptAlert: [Function: bound queuedCommandFn],
  appium: {
    getContext: [Function: bound queuedCommandFn],
    getContexts: [Function: bound queuedCommandFn],
    getCurrentActivity: [Function: bound queuedCommandFn],
    getCurrentPackage: [Function: bound queuedCommandFn],
    getGeolocation: [Function: bound queuedCommandFn],
    getOrientation: [Function: bound queuedCommandFn],
    hideKeyboard: [Function: bound queuedCommandFn],
    isKeyboardShown: [Function: bound queuedCommandFn],
    longPressKeyCode: [Function: bound queuedCommandFn],
    pressKeyCode: [Function: bound queuedCommandFn],
    setContext: [Function: bound queuedCommandFn],
    setGeolocation: [Function: bound queuedCommandFn],
    setOrientation: [Function: bound queuedCommandFn],
    startActivity: [Function: bound queuedCommandFn]
  },
  back: [Function: bound queuedCommandFn],
  closeWindow: [Function: bound queuedCommandFn],
  contexts: [Function: bound queuedCommandFn],
  cookie: [Function: bound queuedCommandFn],
  currentContext: [Function: bound queuedCommandFn],
  dismissAlert: [Function: bound queuedCommandFn],
  element: [Function (anonymous)] {
    findActive: [Function: findActive],
    getActive: [Function: findActive]
  },
  elementActive: [Function: bound queuedCommandFn],
  elementIdAttribute: [Function: bound queuedCommandFn],
  elementIdClear: [Function: bound queuedCommandFn],
  elementIdClick: [Function: bound queuedCommandFn],
  elementIdCssProperty: [Function: bound queuedCommandFn],
  elementIdDisplayed: [Function: bound queuedCommandFn],
  elementIdDoubleClick: [Function: bound queuedCommandFn],
  elementIdElement: [Function: bound queuedCommandFn],
  elementIdElements: [Function: bound queuedCommandFn],
  elementIdEnabled: [Function: bound queuedCommandFn],
  elementIdEquals: [Function: bound queuedCommandFn],
  elementIdLocation: [Function: bound queuedCommandFn],
  elementIdLocationInView: [Function: bound queuedCommandFn],
  elementIdName: [Function: bound queuedCommandFn],
  elementIdProperty: [Function: bound queuedCommandFn],
  elementIdSelected: [Function: bound queuedCommandFn],
  elementIdSize: [Function: bound queuedCommandFn],
  elementIdText: [Function: bound queuedCommandFn],
  elementIdValue: [Function: bound queuedCommandFn],
  elements: [Function: bound queuedCommandFn],
  execute: [Function: bound queuedCommandFn],
  executeScript: [Function: bound queuedCommandFn],
  executeAsyncScript: [Function: bound queuedCommandFn],
  executeAsync: [Function: bound queuedCommandFn],
  forward: [Function: bound queuedCommandFn],
  frame: [Function: bound queuedCommandFn],
  frameParent: [Function: bound queuedCommandFn],
  fullscreenWindow: [Function: bound queuedCommandFn],
  getAlertText: [Function: bound queuedCommandFn],
  getCurrentUrl: [Function: bound queuedCommandFn],
  getOrientation: [Function: bound queuedCommandFn],
  keys: [Function: bound queuedCommandFn],
  minimizeWindow: [Function: bound queuedCommandFn],
  mouseButtonClick: [Function: bound queuedCommandFn],
  mouseButtonDown: [Function: bound queuedCommandFn],
  mouseButtonUp: [Function: bound queuedCommandFn],
  moveTo: [Function: bound queuedCommandFn],
  navigateTo: [Function: bound queuedCommandFn],
  openNewWindow: [Function: bound queuedCommandFn],
  quit: [Function: bound queuedCommandFn],
  refresh: [Function: bound queuedCommandFn],
  releaseMouseButton: [Function: bound queuedCommandFn],
  screenshot: [Function: bound queuedCommandFn],
  session: [Function: bound queuedCommandFn],
  sessionLog: [Function: bound queuedCommandFn],
  sessionLogTypes: [Function: bound queuedCommandFn],
  sessions: [Function: bound queuedCommandFn],
  setAlertText: [Function: bound queuedCommandFn],
  setContext: [Function: bound queuedCommandFn],
  setOrientation: [Function: bound queuedCommandFn],
  source: [Function: bound queuedCommandFn],
  status: [Function: bound queuedCommandFn],
  submit: [Function: bound queuedCommandFn],
  switchToWindow: [Function: bound queuedCommandFn],
  switchWindow: [Function: bound queuedCommandFn],
  timeouts: [Function: bound queuedCommandFn],
  timeoutsAsyncScript: [Function: bound queuedCommandFn],
  timeoutsImplicitWait: [Function: bound queuedCommandFn],
  title: [Function: bound queuedCommandFn],
  url: [Function: bound queuedCommandFn],
  waitUntil: [Function: bound queuedCommandFn],
  windowHandle: [Function: bound queuedCommandFn],
  windowHandles: [Function: bound queuedCommandFn],
  windowMaximize: [Function: bound queuedCommandFn],
  windowPosition: [Function: bound queuedCommandFn],
  windowRect: [Function: bound queuedCommandFn],
  windowSize: [Function: bound queuedCommandFn],
  alerts: {
    accept: [Function: bound queuedCommandFn],
    dismiss: [Function: bound queuedCommandFn],
    getText: [Function: bound queuedCommandFn],
    setText: [Function: bound queuedCommandFn]
  },
  axeInject: [Function: bound queuedCommandFn],
  axeRun: [Function: bound queuedCommandFn],
  captureBrowserConsoleLogs: [Function: bound queuedCommandFn],
  captureBrowserExceptions: [Function: bound queuedCommandFn],
  captureNetworkRequests: [Function: bound queuedCommandFn],
  cookies: {
    delete: [Function: bound queuedCommandFn],
    deleteAll: [Function: bound queuedCommandFn],
    get: [Function: bound queuedCommandFn],
    getAll: [Function: bound queuedCommandFn],
    set: [Function: bound queuedCommandFn]
  },
  debug: [Function: bound queuedCommandFn],
  deleteCookie: [Function: bound queuedCommandFn],
  deleteCookies: [Function: bound queuedCommandFn],
  document: {
    injectScript: [Function: bound queuedCommandFn],
    source: [Function: bound queuedCommandFn],
    pageSource: [Function: bound queuedCommandFn]
  },
  enablePerformanceMetrics: [Function: bound queuedCommandFn],
  end: [Function: bound queuedCommandFn],
  getCookie: [Function: bound queuedCommandFn],
  getCookies: [Function: bound queuedCommandFn],
  getLog: [Function: bound queuedCommandFn],
  getLogTypes: [Function: bound queuedCommandFn],
  getPerformanceMetrics: [Function: bound queuedCommandFn],
  getTitle: [Function: bound queuedCommandFn],
  getWindowPosition: [Function: bound queuedCommandFn],
  getWindowRect: [Function: bound queuedCommandFn],
  getWindowSize: [Function: bound queuedCommandFn],
  init: [Function: bound queuedCommandFn],
  injectScript: [Function: bound queuedCommandFn],
  isLogAvailable: [Function: bound queuedCommandFn],
  maximizeWindow: [Function: bound queuedCommandFn],
  mockNetworkResponse: [Function: bound queuedCommandFn],
  pageSource: [Function: bound queuedCommandFn],
  pause: [Function: bound queuedCommandFn],
  perform: [Function: bound queuedCommandFn],
  registerBasicAuth: [Function: bound queuedCommandFn],
  resizeWindow: [Function: bound queuedCommandFn],
  saveScreenshot: [Function: bound queuedCommandFn],
  saveSnapshot: [Function: bound queuedCommandFn],
  setCookie: [Function: bound queuedCommandFn],
  setDeviceDimensions: [Function: bound queuedCommandFn],
  setGeolocation: [Function: bound queuedCommandFn],
  setNetworkConditions: [Function: bound queuedCommandFn],
  setWindowPosition: [Function: bound queuedCommandFn],
  setWindowRect: [Function: bound queuedCommandFn],
  setWindowSize: [Function: bound queuedCommandFn],
  takeHeapSnapshot: [Function: bound queuedCommandFn],
  urlHash: [Function: bound queuedCommandFn],
  useCss: [Function: bound queuedCommandFn],
  useXpath: [Function: bound queuedCommandFn],
  window: {
    close: [Function: bound queuedCommandFn],
    fullscreen: [Function: bound queuedCommandFn],
    getAllHandles: [Function: bound queuedCommandFn],
    getHandle: [Function: bound queuedCommandFn],
    getPosition: [Function: bound queuedCommandFn],
    getRect: [Function: bound queuedCommandFn],
    getSize: [Function: bound queuedCommandFn],
    maximize: [Function: bound queuedCommandFn],
    minimize: [Function: bound queuedCommandFn],
    open: [Function: bound queuedCommandFn],
    openNew: [Function: bound queuedCommandFn],
    setPosition: [Function: bound queuedCommandFn],
    setRect: [Function: bound queuedCommandFn],
    setSize: [Function: bound queuedCommandFn],
    resize: [Function: bound queuedCommandFn],
    switchTo: [Function: bound queuedCommandFn],
    switch: [Function: bound queuedCommandFn]
  },
  within: [Function: bound withinDefinition],
  clearValue: [Function: bound queuedCommandFn],
  click: [Function: bound queuedCommandFn],
  clickAndHold: [Function: bound queuedCommandFn],
  doubleClick: [Function: bound queuedCommandFn],
  dragAndDrop: [Function: bound queuedCommandFn],
  findElement: [Function: bound queuedCommandFn],
  findElements: [Function: bound queuedCommandFn],
  getAccessibleName: [Function: bound queuedCommandFn],
  getAriaRole: [Function: bound queuedCommandFn],
  getAttribute: [Function: bound queuedCommandFn],
  getElementAttribute: [Function: bound queuedCommandFn],
  getCssProperty: [Function: bound queuedCommandFn],
  getElementProperty: [Function: bound queuedCommandFn],
  getElementRect: [Function: bound queuedCommandFn],
  getElementSize: [Function: bound queuedCommandFn],
  getFirstElementChild: [Function: bound queuedCommandFn],
  getLastElementChild: [Function: bound queuedCommandFn],
  getLocation: [Function: bound queuedCommandFn],
  getLocationInView: [Function: bound queuedCommandFn],
  getNextSibling: [Function: bound queuedCommandFn],
  getPreviousSibling: [Function: bound queuedCommandFn],
  getShadowRoot: [Function: bound queuedCommandFn],
  getTagName: [Function: bound queuedCommandFn],
  getText: [Function: bound queuedCommandFn],
  getValue: [Function: bound queuedCommandFn],
  hasDescendants: [Function: bound queuedCommandFn],
  isEnabled: [Function: bound queuedCommandFn],
  isPresent: [Function: bound queuedCommandFn],
  isSelected: [Function: bound queuedCommandFn],
  isVisible: [Function: bound queuedCommandFn],
  moveToElement: [Function: bound queuedCommandFn],
  rightClick: [Function: bound queuedCommandFn],
  sendKeys: [Function: bound queuedCommandFn],
  setAttribute: [Function: bound queuedCommandFn],
  setPassword: [Function: bound queuedCommandFn],
  sendKeysRedacted: [Function: bound queuedCommandFn],
  setValue: [Function: bound queuedCommandFn],
  submitForm: [Function: bound queuedCommandFn],
  takeElementScreenshot: [Function: bound queuedCommandFn],
  updateValue: [Function: bound queuedCommandFn],
  uploadFile: [Function: bound queuedCommandFn],
  waitForElementNotPresent: [Function: bound queuedCommandFn],
  waitForElementNotVisible: [Function: bound queuedCommandFn],
  waitForElementPresent: [Function: bound queuedCommandFn],
  waitForElementVisible: [Function: bound queuedCommandFn],
  angular: { getElementsInList: [Function: bound queuedCommandFn] },
  strictClick: [Function: bound queuedCommandFn],
  _axeInjectFunc: [Function: bound queuedCommandFn],
  mockserver: { create: [Function: bound queuedCommandFn] },
  supertest: { request: [Function: bound queuedCommandFn] }
}&#34; (35ms)"></failure>

    
    </testcase>
  

  

    

  
  </testsuite>
</testsuites>
